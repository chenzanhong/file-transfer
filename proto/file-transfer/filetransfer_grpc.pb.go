// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: proto/filetransfer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileTransferService_CommonUpload_FullMethodName              = "/filetransfer.FileTransferService/CommonUpload"
	FileTransferService_CommonDownload_FullMethodName            = "/filetransfer.FileTransferService/CommonDownload"
	FileTransferService_TransferBetweenTwoServers_FullMethodName = "/filetransfer.FileTransferService/TransferBetweenTwoServers"
)

// FileTransferServiceClient is the client API for FileTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileTransferServiceClient interface {
	// 客户端上传文件到指定服务器
	CommonUpload(ctx context.Context, in *CommonUploadRequest, opts ...grpc.CallOption) (*CommonUploadResponse, error)
	// 客户端从指定服务器下载文件（返回流）
	CommonDownload(ctx context.Context, in *CommonDownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error)
	// 两个服务器之间传输文件
	TransferBetweenTwoServers(ctx context.Context, in *TransferBetweenRequest, opts ...grpc.CallOption) (*TransferResponse, error)
}

type fileTransferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileTransferServiceClient(cc grpc.ClientConnInterface) FileTransferServiceClient {
	return &fileTransferServiceClient{cc}
}

func (c *fileTransferServiceClient) CommonUpload(ctx context.Context, in *CommonUploadRequest, opts ...grpc.CallOption) (*CommonUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonUploadResponse)
	err := c.cc.Invoke(ctx, FileTransferService_CommonUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) CommonDownload(ctx context.Context, in *CommonDownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileTransferService_ServiceDesc.Streams[0], FileTransferService_CommonDownload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CommonDownloadRequest, FileChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileTransferService_CommonDownloadClient = grpc.ServerStreamingClient[FileChunk]

func (c *fileTransferServiceClient) TransferBetweenTwoServers(ctx context.Context, in *TransferBetweenRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, FileTransferService_TransferBetweenTwoServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileTransferServiceServer is the server API for FileTransferService service.
// All implementations must embed UnimplementedFileTransferServiceServer
// for forward compatibility.
type FileTransferServiceServer interface {
	// 客户端上传文件到指定服务器
	CommonUpload(context.Context, *CommonUploadRequest) (*CommonUploadResponse, error)
	// 客户端从指定服务器下载文件（返回流）
	CommonDownload(*CommonDownloadRequest, grpc.ServerStreamingServer[FileChunk]) error
	// 两个服务器之间传输文件
	TransferBetweenTwoServers(context.Context, *TransferBetweenRequest) (*TransferResponse, error)
	mustEmbedUnimplementedFileTransferServiceServer()
}

// UnimplementedFileTransferServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileTransferServiceServer struct{}

func (UnimplementedFileTransferServiceServer) CommonUpload(context.Context, *CommonUploadRequest) (*CommonUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonUpload not implemented")
}
func (UnimplementedFileTransferServiceServer) CommonDownload(*CommonDownloadRequest, grpc.ServerStreamingServer[FileChunk]) error {
	return status.Errorf(codes.Unimplemented, "method CommonDownload not implemented")
}
func (UnimplementedFileTransferServiceServer) TransferBetweenTwoServers(context.Context, *TransferBetweenRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferBetweenTwoServers not implemented")
}
func (UnimplementedFileTransferServiceServer) mustEmbedUnimplementedFileTransferServiceServer() {}
func (UnimplementedFileTransferServiceServer) testEmbeddedByValue()                             {}

// UnsafeFileTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileTransferServiceServer will
// result in compilation errors.
type UnsafeFileTransferServiceServer interface {
	mustEmbedUnimplementedFileTransferServiceServer()
}

func RegisterFileTransferServiceServer(s grpc.ServiceRegistrar, srv FileTransferServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileTransferServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileTransferService_ServiceDesc, srv)
}

func _FileTransferService_CommonUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).CommonUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_CommonUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).CommonUpload(ctx, req.(*CommonUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_CommonDownload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommonDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileTransferServiceServer).CommonDownload(m, &grpc.GenericServerStream[CommonDownloadRequest, FileChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileTransferService_CommonDownloadServer = grpc.ServerStreamingServer[FileChunk]

func _FileTransferService_TransferBetweenTwoServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferBetweenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).TransferBetweenTwoServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_TransferBetweenTwoServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).TransferBetweenTwoServers(ctx, req.(*TransferBetweenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileTransferService_ServiceDesc is the grpc.ServiceDesc for FileTransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileTransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filetransfer.FileTransferService",
	HandlerType: (*FileTransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommonUpload",
			Handler:    _FileTransferService_CommonUpload_Handler,
		},
		{
			MethodName: "TransferBetweenTwoServers",
			Handler:    _FileTransferService_TransferBetweenTwoServers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CommonDownload",
			Handler:       _FileTransferService_CommonDownload_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/filetransfer.proto",
}
